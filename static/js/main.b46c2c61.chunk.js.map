{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","videoRef","React","createRef","canvasRef","detectFrame","video","model","detect","then","predictions","renderPredictions","requestAnimationFrame","console","log","ctx","current","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","state","window","stream","navigator","mediaDevices","getUserMedia","webcamPromise","audio","facingMode","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","cocoSsd","all","values","className","ref","this","autoPlay","playsInline","muted","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"6ZAiGeA,G,wBA1Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRC,SAAWC,IAAMC,YALE,EAMnBC,UAAYF,IAAMC,YANC,EAmCnBE,YAAc,SAACC,EAAOC,GACpBA,EAAMC,OAAOF,GAAOG,KAAK,SAAAC,GACvB,EAAKC,kBAAkBD,GACvBE,sBAAsB,kBAAM,EAAKP,YAAYC,EAAOC,QAtCrC,EA0CnBI,kBAAoB,SAAAD,GAClBG,QAAQC,IAAI,CAAEJ,gBACd,IAAMK,EAAM,EAAKX,UAAUY,QAAQC,WAAW,MAC9CF,EAAIG,UAAU,EAAG,EAAGH,EAAII,OAAOC,MAAOL,EAAII,OAAOE,QAEjD,IAAMC,EAAO,kBACbP,EAAIO,KAAOA,EACXP,EAAIQ,aAAe,MACnBb,EAAYc,QAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GACpBP,EAAQK,EAAWE,KAAK,GACxBN,EAASI,EAAWE,KAAK,GAC/BZ,EAAIc,YAAc,UAClBd,EAAIe,UAAY,EAChBf,EAAIgB,WAAWL,EAAGE,EAAGR,EAAOC,GAC5BN,EAAIiB,UAAY,UAChB,IAAMC,EAAYlB,EAAImB,YAAYT,EAAWU,OAAOf,MAC9CgB,EAAaC,SAASf,EAAM,IAClCP,EAAIuB,SAASZ,EAAGE,EAAGK,EAAY,EAAGG,EAAa,KAGjD1B,EAAYc,QAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GAC1BZ,EAAIiB,UAAY,UAChBjB,EAAIwB,SAASd,EAAWU,MAAOT,EAAGE,MAlEpC,EAAKY,MAAQ,GAFI,E,iFAQE,IAAD,OAElB,GADA3B,QAAQC,IAAI,IAAK2B,OAAOC,QACpBC,UAAUC,cAAgBD,UAAUC,aAAaC,aAAc,CAEjE,IAAMC,EAAgBH,UAAUC,aAC7BC,aAAa,CACZE,OAAO,EACPzC,MAAO,CACL0C,WAAY,UAGfvC,KAAK,SAAAiC,GAGJ,OAFAD,OAAOC,OAASA,EAChB,EAAKzC,SAASe,QAAQiC,UAAYP,EAC3B,IAAIQ,QAAQ,SAACC,EAASC,GAC3B,EAAKnD,SAASe,QAAQqC,iBAAmB,WACvCF,SAIFG,EAAeC,MACrBL,QAAQM,IAAI,CAACF,EAAcR,IAAgBrC,KAAK,SAAAgD,GAC9C,EAAKpD,YAAY,EAAKJ,SAASe,QAASyC,EAAO,S,+BA2CnD,OACE,yBAAKC,UAAU,OACb,2BACEA,UAAU,MACVC,IAAKC,KAAK3D,SACV4D,UAAQ,EACRC,aAAW,EACXC,OAAK,EACL3C,MAAM,MACNC,OAAO,QAET,4BAAQqC,UAAU,MAAMC,IAAKC,KAAKxD,UAAWgB,MAAM,MAAMC,OAAO,a,GArFtD2C,cCMEC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB7B,WACrBA,UAAU8B,cAAcC,MAAMjE,KAAK,SAAAkE,GACjCA,EAAaC,iB","file":"static/js/main.b46c2c61.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  videoRef = React.createRef();\n  canvasRef = React.createRef();\n\n  componentDidMount() {\n    console.log(\"s\", window.stream);\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      // console.log(navigator.mediaDevices.getUserMedia);\n      const webcamPromise = navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"user\"\n          }\n        })\n        .then(stream => {\n          window.stream = stream;\n          this.videoRef.current.srcObject = stream;\n          return new Promise((resolve, reject) => {\n            this.videoRef.current.onloadedmetadata = () => {\n              resolve();\n            };\n          });\n        });\n      const modelPromise = cocoSsd.load();\n      Promise.all([modelPromise, webcamPromise]).then(values => {\n        this.detectFrame(this.videoRef.current, values[0]);\n      });\n    }\n  }\n\n  detectFrame = (video, model) => {\n    model.detect(video).then(predictions => {\n      this.renderPredictions(predictions);\n      requestAnimationFrame(() => this.detectFrame(video, model));\n    });\n  };\n\n  renderPredictions = predictions => {\n    console.log({ predictions });\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    const font = \"16px sans-serif\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n      ctx.strokeStyle = \"#00ffff\";\n      ctx.lineWidth = 4;\n      ctx.strokeRect(x, y, width, height);\n      ctx.fillStyle = \"#00ffff\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 10);\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(prediction.class, x, y);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <video\n          className=\"box\"\n          ref={this.videoRef}\n          autoPlay\n          playsInline\n          muted\n          width=\"500\"\n          height=\"500\"\n        />\n        <canvas className=\"box\" ref={this.canvasRef} width=\"500\" height=\"500\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}